# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4.4.2
      env:
        # JFrog Platform url
        JF_URL: ${{ secrets.JF_URL }} # or 'https://acme.jfrog.io'
        JF_USER: ${{ secrets.JF_USER }}
        JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
        # JFrog Platform access token
        #JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
    - run: |
        jf rt ping
        jf --version
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    - name: Maven JF Setup 
      run: |
        jf mvnc --repo-resolve-releases mvn-libs-release --repo-resolve-snapshots mvn-libs-snapshot --repo-deploy-releases mvn-libs-release --repo-deploy-snapshots mvn-libs-snapshot
    - name: maven install
      run: jf mvn install -f pom.xml
    - name: publish build info
      run: |
        jf rt build-collect-env 
        jf rt build-add-git
        jf rt build-publish
    - name: build scan
      run: |            
        jf build-scan --fail=false
